dir()
TestFunc.R
TestFunc()
"TestFunc.R"
TestFunc()
source("TestFunc.R")
TestFunc
TestFunc()
TestFunc()
TestFunc()
TestFunc()
TestFunc()
x<-1
print(x)
msg<-"Hello World"
print(msg)
##Hello
x<-1:20
print(x)
x(2)
x[2]
x[10]
x[10:12]
attributes(x)
x<-c(x,20:1)
print(x)
pi
e
e()
y<-c(1.7, "a")
print(y)
class(x)
as.numeric(x)
class(as.numeric(x))
class(as.logical(x))
as.logical(x)
x<- list(1, "a", TRUE, 1+4i)
x
x[2]
x[2] <- c("a", "b", "c")
x<- list(1, c("a", "b", "c"), TRUE, 1+4i)
x
x[2]
x[2][2]
x[[2]][2]
m<-matrix(2,3)
m
m<-matrix(nrow=2,ncol=3)
m
m<-matrix(2,10)
m
n=tranpose(m)
n=transpose(m)
?transpose
derp
x<-factor(c("yes", "yes", "no", "yes", "no")), levels=c("yes","no")
x<-factor(c("yes", "yes", "no", "yes", "no")), levels=c("yes","no")
x<-factor(c("yes", "yes", "no", "yes", "no"), levels=c("yes","no"))
x
unclass(x)
p<-1:20
as.integer(is.nan(p))
p[4]<-NaN
as.integer(is.nan(p))
p==5
as.integer(p==5)
x<-c(4, "a", T)
x
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x{{2}}
x[[2]]
x <- 1:4
y <- 2
+y
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x>=10]<-4
x
data<-read.csv("hw1_data.csv")
data
data[1:2]
data[:][1:2]
data[][1:2]
data
data[1:2,]
length(data[1])
length(data[1])
attributes(data)
nrow(data)
data[nrow(data)-1:nrow(data),]
nrow(data)-1:nrow(data)
nrow(data)-1
nrow(data)
152:153
(nrow(data)-1):nrow(data)
data[(nrow(data)-1:nrow(data)),]
data[(nrow(data)-1:nrow(data)),]
data[152:153,]
data[47,"Ozone"]
sum(as.integer(is.na(data[,"Ozone"])))
x<-c(10, NA, 20)
x
mean(x)
y=T
!Y
!y
mean(data[!is.na(data[,"Ozone"]), "Ozone"])
mean(data[data[,"Month"]==6], "Temp")
mean(data[data[,"Month"]==6], "Temp"])
mean(data[,data[,"Month"]==6], "Temp"])
data[,"Month"]==6]
data[,"Month"]==6
mean(data[data[,"Month"]==6, "Temp"])
x
max(x0)
max(x)
max(x[!is.na(x)])
max(data[data[,"Month"]==5,"Ozone"])
max(data[data[,"Month"]==5 && !is.na(data[, "Ozone"]),"Ozone"])
x=c(1,1,0,1,0)
y=c(0,1,1,0,1)
x&&y
x&y
max(data[data[,"Month"]==5 & !is.na(data[, "Ozone"]),"Ozone"])
mean(data[data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone">31], "Solar.R"])
mean(data[!is.na(data[,"Solar.R]) & data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone">31], "Solar.R"])
mean(data[!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone">31], "Solar.R"])
!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone">31
!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone">31]
data
tmp<-data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone">31]
tmp
data[!is.na(data[,"Ozone"]), "Ozone">31]
data[!is.na(data[,"Ozone"]), "Ozone">=32]
data[, "Ozone"]>=32
mean(data[!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[!is.na(data[,"Ozone"]), "Ozone"]>31], "Solar.R"])
data[!is.na(data[,"Ozone"]), "Ozone"]>31
data[,"Temp"]>90
data[,"Ozone"]>31
mean(data[!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"], "Ozone"]>31], "Solar.R"])
mean(data[!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"], "Ozone"]>31, "Solar.R"])
mean(data[!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"]>31, "Solar.R"])
data[,"Temp"]>90 & data[,"Ozone"]>31
is.true(data[,"Temp"]>90 & data[,"Ozone"]>31)
true(data[,"Temp"]>90 & data[,"Ozone"]>31)
as.integer(data[,"Temp"]>90 & data[,"Ozone"]>31)
!is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"]>31
x <- !is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"]>31
x[is.na(x)] <-F
x
x <- !is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"]>31
x
x <- !is.na(data[,"Solar.R"]) & data[,"Temp"]>90 & data[,"Ozone"]>31
x[is.na(x)] <-F
mean(data[x, "Solar.R"])
library(datasets)
data(mtcars)
?mtcars
data1 = with(mtcars, tapply(hp, cyl, mean))
data1
data1[3]- data1[1]
mtcars$hp
mtcars$cyl
split(mtcars$hp)
data1 = with(mtcars, tapply(hp, cyl, mean))
hist
source('cachematric.R')
setwd("C:/CodeRepo/R/ProgrammingAssignment2")
source('cachematric.R')
source('cachematrix.R')
x = matrix(1:4,2,2)
m<-makeCacheMatrix(x)
cacheSolve(m)
x<-matrix(4:7,2,2)
m$get()
m$getinverse()
m$set(x)
cacheSolve(m)
m
?mat
source('cahcematrix.R')
source('cachematrix.R')
x = matrix(1:4,2,2)
mat = makeCacheMatrix(x)
mat
mat$getInverse()
solveCache(mat)
cacheSolve(mat)
cacheSolve(mat)
cacheSolve(mat)
cacheSolve(mat)
cacheSolve(mat)
cacheSolve(mat)
